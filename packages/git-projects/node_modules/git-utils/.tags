release	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.release = function() {$/;"	function	line:38
Repository	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  indexStatusFlags = statusIndexNew | statusIndexModified | statusIndexDeleted | statusIndexRenamed | statusIndexTypeChange;$/;"	class	line:36
Repository.release	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.release = function() {$/;"	method	line:38
getWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getWorkingDirectory = function() {$/;"	function	line:50
Repository.getWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getWorkingDirectory = function() {$/;"	method	line:50
getShortHead	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getShortHead = function() {$/;"	function	line:55
Repository.getShortHead	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getShortHead = function() {$/;"	method	line:55
isStatusModified	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusModified = function(status) {$/;"	function	line:76
Repository.isStatusModified	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusModified = function(status) {$/;"	method	line:76
isPathModified	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathModified = function(path) {$/;"	function	line:83
Repository.isPathModified	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathModified = function(path) {$/;"	method	line:83
isStatusNew	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusNew = function(status) {$/;"	function	line:87
Repository.isStatusNew	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusNew = function(status) {$/;"	method	line:87
isPathNew	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathNew = function(path) {$/;"	function	line:94
Repository.isPathNew	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathNew = function(path) {$/;"	method	line:94
isStatusDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusDeleted = function(status) {$/;"	function	line:98
Repository.isStatusDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusDeleted = function(status) {$/;"	method	line:98
isPathDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathDeleted = function(path) {$/;"	function	line:105
Repository.isPathDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathDeleted = function(path) {$/;"	method	line:105
isPathStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathStaged = function(path) {$/;"	function	line:109
Repository.isPathStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isPathStaged = function(path) {$/;"	method	line:109
isStatusIgnored	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusIgnored = function(status) {$/;"	function	line:113
Repository.isStatusIgnored	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusIgnored = function(status) {$/;"	method	line:113
isStatusStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusStaged = function(status) {$/;"	function	line:120
Repository.isStatusStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isStatusStaged = function(status) {$/;"	method	line:120
getUpstreamBranch	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getUpstreamBranch = function(branch) {$/;"	function	line:127
Repository.getUpstreamBranch	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getUpstreamBranch = function(branch) {$/;"	method	line:127
getAheadBehindCount	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getAheadBehindCount = function(branch) {$/;"	function	line:153
Repository.getAheadBehindCount	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.getAheadBehindCount = function(branch) {$/;"	method	line:153
counts.ahead	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^    counts = {$/;"	property	line:161
counts.behind	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^      ahead: 0,$/;"	property	line:162
checkoutReference	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.checkoutReference = function(branch, create) {$/;"	function	line:186
Repository.checkoutReference	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.checkoutReference = function(branch, create) {$/;"	method	line:186
relativize	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.relativize = function(path) {$/;"	function	line:193
Repository.relativize	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.relativize = function(path) {$/;"	method	line:193
submoduleForPath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.submoduleForPath = function(path) {$/;"	function	line:244
Repository.submoduleForPath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.submoduleForPath = function(path) {$/;"	method	line:244
isWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isWorkingDirectory = function(path) {$/;"	function	line:263
Repository.isWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  Repository.prototype.isWorkingDirectory = function(path) {$/;"	method	line:263
realpath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  realpath = function(unrealPath) {$/;"	function	line:294
realpath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  };$/;"	function	line:292
isRootPath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  isRootPath = function(repositoryPath) {$/;"	function	line:304
isRootPath	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  };$/;"	function	line:302
openRepository	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  openRepository = function(repositoryPath) {$/;"	function	line:312
openRepository	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  };$/;"	function	line:310
openSubmodules	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  openSubmodules = function(repository) {$/;"	function	line:337
openSubmodules	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  };$/;"	function	line:335
open	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  exports.open = function(repositoryPath) {$/;"	function	line:362
exports.open	/Users/joshaber/Documents/Development/GitHub/git-utils/lib/git.js	/^  };$/;"	function	line:360
Repository::release	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::release = ->$/;"	function	line:28
Repository::getWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::getWorkingDirectory = ->$/;"	function	line:32
Repository::getShortHead	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::getShortHead = ->$/;"	function	line:35
Repository::isStatusModified	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isStatusModified = (status=0) ->$/;"	function	line:44
Repository::isPathModified	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isPathModified = (path) ->$/;"	function	line:47
Repository::isStatusNew	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isStatusNew = (status=0) ->$/;"	function	line:50
Repository::isPathNew	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isPathNew = (path) ->$/;"	function	line:53
Repository::isStatusDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isStatusDeleted = (status=0) ->$/;"	function	line:56
Repository::isPathDeleted	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isPathDeleted = (path) ->$/;"	function	line:59
Repository::isPathStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isPathStaged = (path) ->$/;"	function	line:62
Repository::isStatusIgnored	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isStatusIgnored = (status=0) ->$/;"	function	line:65
Repository::isStatusStaged	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isStatusStaged = (status=0) ->$/;"	function	line:68
Repository::getUpstreamBranch	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::getUpstreamBranch = (branch) ->$/;"	function	line:71
Repository::getAheadBehindCount	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::getAheadBehindCount = (branch='HEAD')->$/;"	function	line:87
Repository::checkoutReference	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::checkoutReference = (branch, create)->$/;"	function	line:109
Repository::relativize	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::relativize = (path) ->$/;"	function	line:115
Repository::submoduleForPath	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::submoduleForPath = (path) ->$/;"	function	line:156
Repository::isWorkingDirectory	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^Repository::isWorkingDirectory = (path) ->$/;"	function	line:170
realpath	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^realpath = (unrealPath) ->$/;"	function	line:188
isRootPath	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^isRootPath = (repositoryPath) ->$/;"	function	line:194
openRepository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^openRepository = (repositoryPath) ->$/;"	function	line:200
openSubmodules	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^openSubmodules = (repository) ->$/;"	function	line:218
exports.open	/Users/joshaber/Documents/Development/GitHub/git-utils/src/git.coffee	/^exports.open = (repositoryPath) ->$/;"	function	line:229
SRC_REPOSITORY_H_	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.h	/^#define SRC_REPOSITORY_H_$/;"	macro	line:23
Repository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.h	/^class Repository : public Nan::ObjectWrap {$/;"	class	line:32
repository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.h	/^  git_repository* repository;$/;"	member	line:89	class:Repository
module.exports	/Users/joshaber/Documents/Development/GitHub/git-utils/Gruntfile.coffee	/^module.exports = (grunt) ->$/;"	function	line:1
execCommands	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^execCommands = (commands, callback) ->$/;"	function	line:9
git	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^describe "git", ->$/;"	function	line:16
.open(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".open(path)", ->$/;"	function	line:22
when the path is a repository	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is a repository", ->$/;"	function	line:23
returns a repository	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns a repository", ->$/;"	function	line:24
when the path isn't a repository	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path isn't a repository", ->$/;"	function	line:27
returns null	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns null", ->$/;"	function	line:28
.getPath()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".getPath()", ->$/;"	function	line:31
returns the path to the .git directory	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns the path to the .git directory", ->$/;"	function	line:32
.getWorkingDirectory()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".getWorkingDirectory()", ->$/;"	function	line:38
returns the path to the working directory	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns the path to the working directory", ->$/;"	function	line:39
.getHead()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".getHead()", ->$/;"	function	line:45
when a branch is checked out	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when a branch is checked out", ->$/;"	function	line:46
returns the branch's full path	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns the branch's full path", ->$/;"	function	line:47
when the HEAD is detached	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the HEAD is detached", ->$/;"	function	line:51
return the SHA-1 that is checked out	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return the SHA-1 that is checked out", ->$/;"	function	line:52
.getShortHead()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".getShortHead()", ->$/;"	function	line:56
when a branch is checked out	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when a branch is checked out", ->$/;"	function	line:57
returns the branch's name	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns the branch's name", ->$/;"	function	line:58
when the HEAD is detached	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the HEAD is detached", ->$/;"	function	line:62
return the abbreviated SHA-1 that is checked out	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return the abbreviated SHA-1 that is checked out", ->$/;"	function	line:63
.isIgnored(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".isIgnored(path)", ->$/;"	function	line:67
when the path is undefined	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is undefined", ->$/;"	function	line:80
return false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return false", ->$/;"	function	line:81
when the path is ignored	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is ignored", ->$/;"	function	line:85
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns true", ->$/;"	function	line:86
when the path is not ignored	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is not ignored", ->$/;"	function	line:91
return false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return false", ->$/;"	function	line:92
.isSubmodule(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".isSubmodule(path)", ->$/;"	function	line:98
when the path is undefined	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is undefined", ->$/;"	function	line:99
return false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return false", ->$/;"	function	line:100
when the path is a submodule	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is a submodule", ->$/;"	function	line:104
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "returns true", ->$/;"	function	line:105
when the path is not a submodule	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "when the path is not a submodule", ->$/;"	function	line:109
return false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "return false", ->$/;"	function	line:110
.getConfigValue(key)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".getConfigValue(key)", ->$/;"	function	line:114
returns the value for the key	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns the value for the key", ->$/;"	function	line:115
.setConfigValue(key, value)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".setConfigValue(key, value)", ->$/;"	function	line:121
sets the key to the value in the config	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "sets the key to the value in the config", ->$/;"	function	line:127
.isPathModified(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.isPathModified(path)', ->$/;"	function	line:135
when a path is deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is deleted', ->$/;"	function	line:141
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true', ->$/;"	function	line:142
when a path is modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is modified', ->$/;"	function	line:145
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true', ->$/;"	function	line:146
when a path is new	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is new', ->$/;"	function	line:150
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:151
.isPathDeleted(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.isPathDeleted(path)', ->$/;"	function	line:155
when a path is deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is deleted', ->$/;"	function	line:161
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true', ->$/;"	function	line:162
when a path is modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is modified', ->$/;"	function	line:165
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:166
when a path is new	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is new', ->$/;"	function	line:170
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:171
.isPathNew(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.isPathNew(path)', ->$/;"	function	line:175
when a path is deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is deleted', ->$/;"	function	line:181
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:182
when a path is modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is modified', ->$/;"	function	line:185
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:186
when a path is new	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is new', ->$/;"	function	line:190
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true', ->$/;"	function	line:191
isPathStaged(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe 'isPathStaged(path)', ->$/;"	function	line:195
when a path is new and staged	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is new and staged', ->$/;"	function	line:203
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true ', ->$/;"	function	line:204
when a path is modified and staged	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is modified and staged', ->$/;"	function	line:210
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true ', ->$/;"	function	line:211
when a path is deleted and staged	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is deleted and staged', ->$/;"	function	line:217
returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns true ', ->$/;"	function	line:218
.isStatusIgnored(status)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.isStatusIgnored(status)', ->$/;"	function	line:229
returns true when the status is ignored, false otherwise	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns true when the status is ignored, false otherwise', ->$/;"	function	line:230
.getUpstreamBranch()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getUpstreamBranch()', ->$/;"	function	line:242
when no upstream branch exists	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when no upstream branch exists', ->$/;"	function	line:243
returns null	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns null', ->$/;"	function	line:244
when an upstream branch exists	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when an upstream branch exists', ->$/;"	function	line:248
returns the full path to the branch	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the full path to the branch', ->$/;"	function	line:249
.checkoutReference(reference, [create])	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.checkoutReference(reference, [create])', ->$/;"	function	line:253
when a local reference exists	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a local reference exists', ->$/;"	function	line:262
checks a branch out if passed a short reference	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'checks a branch out if passed a short reference', ->$/;"	function	line:263
checks a branch out if passed a long reference	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'checks a branch out if passed a long reference', ->$/;"	function	line:267
does not check a branch out if the dirty tree interferes	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'does not check a branch out if the dirty tree interferes', ->$/;"	function	line:272
does check a branch out if the dirty tree does not interfere	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'does check a branch out if the dirty tree does not interfere', ->$/;"	function	line:286
when a local reference doesn\'t exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a local reference doesn\\'t exist', ->$/;"	function	line:290
does nothing if branch creation was not specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'does nothing if branch creation was not specified', ->$/;"	function	line:291
creates the new branch (if asked to)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'creates the new branch (if asked to)', ->$/;"	function	line:294
does nothing if the new branch is malformed (even if asked to)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'does nothing if the new branch is malformed (even if asked to)', ->$/;"	function	line:298
when a short reference is passed	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      describe 'when a short reference is passed', ->$/;"	function	line:302
does nothing if branch creation was not specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^        it 'does nothing if branch creation was not specified', ->$/;"	function	line:303
creates the new branch (if asked to)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^        it 'creates the new branch (if asked to)', ->$/;"	function	line:306
.checkoutHead(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.checkoutHead(path)', ->$/;"	function	line:310
when the path exists	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path exists', ->$/;"	function	line:316
replaces the file contents with the HEAD revision and returns true	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'replaces the file contents with the HEAD revision and returns true', ->$/;"	function	line:317
when the path is undefined	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is undefined', ->$/;"	function	line:324
returns false	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns false', ->$/;"	function	line:325
.getReferences()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getReferences()', ->$/;"	function	line:328
returns a list of all the references	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns a list of all the references', ->$/;"	function	line:329
.getReferenceTarget(branch)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getReferenceTarget(branch)', ->$/;"	function	line:338
returns the SHA-1 for a reference	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns the SHA-1 for a reference', ->$/;"	function	line:339
.getDiffStats(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getDiffStats(path)', ->$/;"	function	line:345
when the path is deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is deleted', ->$/;"	function	line:351
returns of number of lines deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns of number of lines deleted', ->$/;"	function	line:352
when the path is modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is modified', ->$/;"	function	line:354
returns the number of lines added and deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the number of lines added and deleted', ->$/;"	function	line:355
when the path is new	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is new', ->$/;"	function	line:360
returns that no lines were added or deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns that no lines were added or deleted', ->$/;"	function	line:361
when the repository has no HEAD	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the repository has no HEAD', ->$/;"	function	line:366
returns that no lines were added and deleted	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns that no lines were added and deleted', ->$/;"	function	line:367
.getHeadBlob(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getHeadBlob(path)', ->$/;"	function	line:374
when the path is modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is modified', ->$/;"	function	line:380
returns the HEAD blob contents	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the HEAD blob contents', ->$/;"	function	line:381
when the path is not modified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is not modified', ->$/;"	function	line:386
returns the HEAD blob contents	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the HEAD blob contents', ->$/;"	function	line:387
when the path does not exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path does not exist', ->$/;"	function	line:390
returns null	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns null', ->$/;"	function	line:391
.getIndexBlob(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getIndexBlob(path)', ->$/;"	function	line:394
when the path is staged	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is staged', ->$/;"	function	line:402
returns the index blob contents	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the index blob contents', ->$/;"	function	line:403
when the path is not staged	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path is not staged', ->$/;"	function	line:419
returns the index blob contents	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the index blob contents', ->$/;"	function	line:420
when the path does not exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the path does not exist', ->$/;"	function	line:427
returns null	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns null', ->$/;"	function	line:428
.getStatus([path])	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getStatus([path])', ->$/;"	function	line:431
when no path is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when no path is specified', ->$/;"	function	line:445
returns the status of all modified paths	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the status of all modified paths', ->$/;"	function	line:446
when a path is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is specified', ->$/;"	function	line:452
returns the status of the given path	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the status of the given path', ->$/;"	function	line:453
.getStatusForPaths([paths])	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getStatusForPaths([paths])', ->$/;"	function	line:456
when a path is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when a path is specified', ->$/;"	function	line:469
returns the status of only that path	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the status of only that path', ->$/;"	function	line:470
returns the status of only that path2	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns the status of only that path2', ->$/;"	function	line:479
when no path is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when no path is specified', ->$/;"	function	line:485
returns an empty object	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns an empty object', ->$/;"	function	line:486
when an empty array is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when an empty array is specified', ->$/;"	function	line:490
returns an empty object	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns an empty object', ->$/;"	function	line:491
when an empty string is specified	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when an empty string is specified', ->$/;"	function	line:495
returns an empty object	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'returns an empty object', ->$/;"	function	line:496
.getAheadBehindCount()	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getAheadBehindCount()', ->$/;"	function	line:500
returns the number of commits ahead of and behind the upstream branch	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns the number of commits ahead of and behind the upstream branch', ->$/;"	function	line:506
.getLineDiffs(path, text, options)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getLineDiffs(path, text, options)', ->$/;"	function	line:522
returns all hunks that differ	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns all hunks that differ', ->$/;"	function	line:523
returns null for paths that don't exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns null for paths that don't exist", ->$/;"	function	line:547
ignoreEolWhitespace option	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "ignoreEolWhitespace option", ->$/;"	function	line:553
ignores eol of line whitespace changes	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "ignores eol of line whitespace changes", ->$/;"	function	line:554
useIndex options	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "useIndex options", ->$/;"	function	line:563
uses the index version instead of the HEAD version for diffs	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "uses the index version instead of the HEAD version for diffs", ->$/;"	function	line:564
.getLineDiffDetails(path, text, options)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.getLineDiffDetails(path, text, options)', ->$/;"	function	line:588
returns all relevant lines in a diff	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'returns all relevant lines in a diff', ->$/;"	function	line:589
isOldLine	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      isOldLine = (diff) ->$/;"	function	line:592
isNewLine	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      isNewLine = (diff) ->$/;"	function	line:595
returns null for paths that don't exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns null for paths that don't exist", ->$/;"	function	line:615
ignoreEolWhitespace option	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "ignoreEolWhitespace option", ->$/;"	function	line:621
ignores eol of line whitespace changes	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "ignores eol of line whitespace changes", ->$/;"	function	line:622
useIndex options	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe "useIndex options", ->$/;"	function	line:631
uses the index version instead of the HEAD version for diffs	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it "uses the index version instead of the HEAD version for diffs", ->$/;"	function	line:632
.relativize(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe '.relativize(path)', ->$/;"	function	line:656
relativizes the given path to the working directory of the repository	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it 'relativizes the given path to the working directory of the repository', ->$/;"	function	line:657
when the opened path is a symlink	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    describe 'when the opened path is a symlink', ->$/;"	function	line:670
relativizes against both the linked path and the real path	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^      it 'relativizes against both the linked path and the real path', ->$/;"	function	line:671
handles case insensitive filesystems	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "handles case insensitive filesystems", ->$/;"	function	line:687
.isWorkingDirectory(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".isWorkingDirectory(path)", ->$/;"	function	line:706
returns whether the given path is the repository's working directory	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns whether the given path is the repository's working directory", ->$/;"	function	line:707
.submoduleForPath(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".submoduleForPath(path)", ->$/;"	function	line:725
returns the repository for the path	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "returns the repository for the path", ->$/;"	function	line:741
.add(path)	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^  describe ".add(path)", ->$/;"	function	line:755
introduces the current state of the file to the index	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "introduces the current state of the file to the index", ->$/;"	function	line:764
throws an error if the file doesn't exist	/Users/joshaber/Documents/Development/GitHub/git-utils/spec/git-spec.coffee	/^    it "throws an error if the file doesn't exist", ->$/;"	function	line:769
Init	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^void Repository::Init(Local<Object> target) {$/;"	function	line:29	class:Repository	signature:(Local<Object> target)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::New) {$/;"	function	line:73	signature:(Repository::New)
GetRepository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^git_repository* Repository::GetRepository(Nan::NAN_METHOD_ARGS_TYPE args) {$/;"	function	line:80	class:Repository	signature:(Nan::NAN_METHOD_ARGS_TYPE args)
GetBlob	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int Repository::GetBlob(Nan::NAN_METHOD_ARGS_TYPE args,$/;"	function	line:84	class:Repository	signature:(Nan::NAN_METHOD_ARGS_TYPE args, git_repository* repo, git_blob*& blob)
CreateDefaultGitDiffOptions	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^git_diff_options Repository::CreateDefaultGitDiffOptions() {$/;"	function	line:150	class:Repository	signature:()
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::Exists) {$/;"	function	line:157	signature:(Repository::Exists)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetPath) {$/;"	function	line:163	signature:(Repository::GetPath)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetWorkingDirectory) {$/;"	function	line:171	signature:(Repository::GetWorkingDirectory)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetSubmodulePaths) {$/;"	function	line:178	signature:(Repository::GetSubmodulePaths)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetHead) {$/;"	function	line:189	signature:(Repository::GetHead)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::RefreshIndex) {$/;"	function	line:213	signature:(Repository::RefreshIndex)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::IsIgnored) {$/;"	function	line:224	signature:(Repository::IsIgnored)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::IsSubmodule) {$/;"	function	line:240	signature:(Repository::IsSubmodule)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetConfigValue) {$/;"	function	line:259	signature:(Repository::GetConfigValue)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::SetConfigValue) {$/;"	function	line:282	signature:(Repository::SetConfigValue)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetStatus) {$/;"	function	line:302	signature:(Repository::GetStatus)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetStatusForPaths) {$/;"	function	line:331	signature:(Repository::GetStatusForPaths)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::CheckoutHead) {$/;"	function	line:381	signature:(Repository::CheckoutHead)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetReferenceTarget) {$/;"	function	line:401	signature:(Repository::GetReferenceTarget)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetDiffStats) {$/;"	function	line:419	signature:(Repository::GetDiffStats)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetHeadBlob) {$/;"	function	line:507	signature:(Repository::GetHeadBlob)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetIndexBlob) {$/;"	function	line:553	signature:(Repository::GetIndexBlob)
StatusCallback	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int Repository::StatusCallback($/;"	function	line:586	class:Repository	signature:( const char* path, unsigned int status, void* payload)
SubmoduleCallback	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int Repository::SubmoduleCallback($/;"	function	line:594	class:Repository	signature:( git_submodule* submodule, const char* name, void* payload)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::Release) {$/;"	function	line:604	signature:(Repository::Release)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetCommitCount) {$/;"	function	line:614	signature:(Repository::GetCommitCount)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetMergeBase) {$/;"	function	line:643	signature:(Repository::GetMergeBase)
DiffHunkCallback	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int Repository::DiffHunkCallback(const git_diff_delta* delta,$/;"	function	line:670	class:Repository	signature:(const git_diff_delta* delta, const git_diff_hunk* range, void* payload)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetLineDiffs) {$/;"	function	line:679	signature:(Repository::GetLineDiffs)
LineDiff	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^struct LineDiff {$/;"	struct	line:734	file:
hunk	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^  git_diff_hunk hunk;$/;"	member	line:735	struct:LineDiff	file:
line	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^  git_diff_line line;$/;"	member	line:736	struct:LineDiff	file:
DiffLineCallback	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int Repository::DiffLineCallback(const git_diff_delta* delta,$/;"	function	line:739	class:Repository	signature:(const git_diff_delta* delta, const git_diff_hunk* range, const git_diff_line* line, void* payload)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetLineDiffDetails) {$/;"	function	line:752	signature:(Repository::GetLineDiffDetails)
ConvertStringVectorToV8Array	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^Local<Value> Repository::ConvertStringVectorToV8Array($/;"	function	line:817	class:Repository	signature:( const std::vector<std::string>& vector)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::GetReferences) {$/;"	function	line:827	signature:(Repository::GetReferences)
branch_checkout	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^int branch_checkout(git_repository* repo, const char* refName) {$/;"	function	line:856	signature:(git_repository* repo, const char* refName)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::CheckoutReference) {$/;"	function	line:876	signature:(Repository::CheckoutReference)
NAN_METHOD	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^NAN_METHOD(Repository::Add) {$/;"	function	line:929	signature:(Repository::Add)
Repository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^Repository::Repository(Local<String> path) {$/;"	function	line:965	class:Repository	signature:(Local<String> path)
~Repository	/Users/joshaber/Documents/Development/GitHub/git-utils/src/repository.cc	/^Repository::~Repository() {$/;"	function	line:974	class:Repository	signature:()
